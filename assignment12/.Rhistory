setwd("~/Documents/PhD/Spring_2024/Genomics/Lab/assignment12")
library("vegan")
library("plotly")
library("tidyverse")
library("gridExtra")
library("data.table")
library("ggpubr")
library("ggrepel")
library("BiocManager")
BiocManager::install("phyloseq", force=TRUE)
BiocManager::install("microbiome", force=TRUE)
BiocManager::install("DESeq2", force=TRUE)
raw_data <- read.delim("16S_Analysis_MappingFile.txt", check.names = FALSE)
modified_data <- raw_data %>% rename(Site = Experiment)
physeqRaw <- readRDS("physeq_data.rds")
data_final <- column_to_rownames(modified_data, var = "X.SampleID")
physeqMerged <- merge_phyloseq(sample_data(data_final), physeqRaw)
library("phyloseq")
library("ggpubr")
library("ggrepel")
library("data.table")
library("microbiome")
library("vegan")
library("gridExtra")
library("DESeq2")
library("plotly")
library("tidyverse")
.libpaths()
.libpaths()
library("phyloseq")
library("ggpubr")
library("ggrepel")
library("data.table")
library("microbiome")
library("vegan")
library("gridExtra")
library("plotly")
library("tidyverse")
library("DESeq2")
raw_data <- read.delim("16S_Analysis_MappingFile.txt", check.names = FALSE)
modified_data <- raw_data %>% rename(Site = Experiment)
physeqRaw <- readRDS("physeq_data.rds")
data_final <- column_to_rownames(modified_data, var = "X.SampleID")
physeqMerged <- merge_phyloseq(sample_data(data_final), physeqRaw)
# Reads per Amplicon Sequence Variant & Plot of Data
readsPerASV <- data.frame("nreads" = sort(taxa_sums(physeqMerged), decreasing = TRUE),"sorted" = 1:ntaxa(physeqMerged))
readsPerASVPlot <- ggplot(readsPerASV,
aes(x = sorted, y = nreads)) +
geom_bar(stat = "identity") +
ggtitle("Reads per Amplicon Sequence Variant") +
scale_y_log10() +
xlab("ASV") + ylab("Number of Sequences") +
theme(plot.title = element_text(hjust = 0.5))
readsPerASVPlot
# Reads per Sample & Plot of Data
readsPerSample <- data.frame("reads_per_sample" = sample_sums(physeqMerged))
summary(readsPerSample)
# Merge readsPerSample back with the sample data for plotting.
sampleData <- merge(sample_data(physeqMerged), readsPerSample,
by = "row.names", all = TRUE)
sampleData <- column_to_rownames(sampleData, var = "Row.names")
# Let's sort the sampleData data frame from highest to lowest count sample.
sampleData <- sampleData %>%
rownames_to_column() %>%
dplyr::arrange(desc(reads_per_sample)) %>%
column_to_rownames()
sampleOrder <- as.character(sampleData$Sample)
# Now apply sampleOrder to the Sample column so they sort correctly in the plot
sampleData$Sample <- factor(sampleData$Sample, levels = sampleOrder)
# Plot the reads per sample bar plot
readsPerSampleBar <- ggplot(sampleData,
aes(x = Sample, y = reads_per_sample)) +
geom_bar(stat = "identity") +
xlab("Sample") + ylab("Number of Reads") +
ggtitle("Reads per Sample Bar Plot") +
#scale_y_log10() +
theme(axis.text.x = element_text(angle = 45),
plot.title = element_text(hjust = 0.5))
readsPerSampleBar
# Plot histogram showing distribution of read counts - see if any samples are ununusally high or low
readsPerSampleHist <- ggplot(sampleData, aes(reads_per_sample)) +
geom_histogram(color = "black", binwidth = 1000) +
xlab("Number of Reads") + ylab("Number of Samples") +
ggtitle("Reads per Sample") +
theme(plot.title = element_text(hjust = 0.5))
readsPerSampleHist
# Calculating reads per Group (Facility 1 & 2)
readsPerGroup <- ggplot(sampleData, aes(x = Site, y = reads_per_sample)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2) +
xlab("Facility") + ylab("Reads per Sample") +
ggtitle("Average Reads per Facility") +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "wilcox.test", label.x.npc = 0.5)
readsPerGroup
# Creating a MDS plot to see if samples do NOT cluster together as expected
set.seed(32688024) # set the seed for reproducibility of "random" computations
brayOrd <- ordinate(physeqMerged, method = "MDS", distance = "bray")
mdsPlot <- plot_ordination(physeqMerged, brayOrd, color = "Site") +
theme_bw() +
geom_point(size = 3.5) +
ggtitle("MDS of Bray Distances") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_text_repel(aes(label = Sample))
mdsPlot
# Taxa Filtering
physeqBacteria <- physeqMerged %>%
subset_taxa(Kingdom == "Bacteria" & Phylum != "Cyanobacteria/Chloroplast")
prevalence_vector <- apply(X = otu_table(physeqBacteria),
MARGIN = ifelse(taxa_are_rows(physeqBacteria), yes = 1, no =2),
FUN = function(x) {sum(x > 0)})
prevalence_df <- data.frame(Prevalence = prevalence_vector,
TotalAbundance = taxa_sums(physeqBacteria),
tax_table(physeqBacteria))
phylaPrevalencePlot <- ggplot(prevalence_df,
aes(x = TotalAbundance,
y = Prevalence/nsamples(physeqBacteria),
color = Family)) +
geom_hline(yintercept = 1/12, alpha = 0.5, linetype = 2) +
geom_point(size = 3, alpha = 0.7) +
scale_x_log10() +
xlab("Total Abundance") +
ylab("Prevalence [Frac. Samples]") +
facet_wrap(~ Phylum) +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)) +
ggtitle("Phylum Prevalence in All Samples",
subtitle = "Colored by Family")
phylaPrevalencePlot
# Create a dataframe that displays the average number of samples for a given taxon,
# & total number of samples for which a taxon is present in
taxaPrevalence_table <- plyr::ddply(prevalence_df,
"Phylum",
function(df1) {
cbind("Avg_Prevalence" = mean(df1$Prevalence),
"Total_Prevalence" = sum(df1$Prevalence))
})
taxaPrevalence_table
# Comparing the taxa found in samples across facilities
abundanceDF <- physeqBacteria %>%
tax_glom(taxrank = "Phylum") %>%
transform_sample_counts(function(x) {x/sum(x)}) %>%
psmelt()
compositionPlot <- ggplot(abundanceDF, aes(x = Sample, y = Abundance, fill = Phylum)) +
geom_bar(stat = "identity", width = 1, color = "grey14") +
facet_wrap(~ Site, scales = "free") +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank())
compositionPlot
# Calculating richness, Pielou's evenness & Shannon diversity
alphaDiv <- microbiome::alpha(physeqBacteria,
index = c("observed", "evenness_pielou",
"diversity_shannon"))
sampleData <- merge(sampleData, alphaDiv, by = "row.names", all = TRUE)
sampleData <- column_to_rownames(sampleData, var = "Row.names")
# Make a boxplot of samples' richness and diversity, grouped by Site
richnessPlot <- ggplot(sampleData,
aes(x = Site, y = observed)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2) +
ylab("Richness") +
xlab("Facility") +
ggtitle("Richness") +
theme_pubr() +
theme(plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "t.test", label.x.npc = 0.5)
evennessPlot <- ggplot(sampleData,
aes(x = Site, y = evenness_pielou)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2) +
ylab("Pielou's Evenness") +
xlab("Facility") +
ggtitle("Pielou's Evenness") +
theme_pubr() +
theme(plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "t.test", label.x.npc = 0.5)
diversityPlot <- ggplot(sampleData,
aes(x = Site, y = diversity_shannon)) +
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.2) +
ylab("Shannon Diversity") +
xlab("Facility") +
ggtitle("Shannon Diversity") +
theme_pubr() +
theme(plot.title = element_text(hjust = 0.5)) +
stat_compare_means(method = "t.test", label.x.npc = 0.5)
grid.arrange(richnessPlot, evennessPlot, diversityPlot, ncol = 3)
# Calculating beta diversity
set.seed(46395617)
ord_wUniFrac <- ordinate(physeqBacteria,
method = "PCoA",
distance = "wunifrac")
pcoa_wUniFrac <- plot_ordination(physeqBacteria,
ord_wUniFrac,
color = "Site") +
theme_bw() +
geom_point(size = 4) +
ggtitle("PCoA of Weighted UniFrac Distance",
subtitle = "Colored by Facility") +
stat_ellipse(type = "norm") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
pcoa_wUniFrac
# Adonis test to see if clustering is significant
set.seed(46395617)
bdist <- phyloseq::distance(physeqBacteria, "wunifrac")
col <- as(sample_data(physeqBacteria), "data.frame")[, "Site"]
adonis.bdist <- adonis(bdist ~ col)
adonis.bdist
# Biomarker Analysis -
dds <- phyloseq_to_deseq2(physeqBacteria, design = ~ Site)
# Run analysis
ddsAnalysis <- DESeq(dds, test = "Wald", fitType = "local", betaPrior = FALSE)
# Extract and format results
ddsResults <- results(ddsAnalysis, contrast = c("Site", "Facility_1", "Facility_2"))
mcols(ddsResults)
# Extract taxonomy table:
taxTable <- data.table(data.frame(as(tax_table(physeqBacteria), "matrix")),
keep.rownames = TRUE)
setnames(taxTable, "rn", "OTU")
setkeyv(taxTable, "OTU")
# Extract DESeq results as a data frame:
resDT <- data.table(as(ddsResults, "data.frame"),
keep.rownames = TRUE)
setnames(resDT, "rn", "OTU")
setkeyv(resDT, "OTU")
# Combine taxonomy information with the results table:
resDT <- taxTable[resDT]
resDT <- resDT %>%
filter(padj != "NA") %>%
mutate(Significant = padj < 0.05)
# Create volcano plot object
volcano <- ggplot(resDT,
aes(x = log2FoldChange, y = -log10(padj),
label1 = Family, # These labels are for plotly
label2 = Genus,
label3 = Species)) +
geom_point(data = subset(resDT,
resDT$Significant == FALSE), # non sig. taxa are grey
color = "grey") +
geom_point(data = subset(resDT,
resDT$Significant == TRUE),
aes(color = Phylum, size = baseMean)) + # sig. taxa colored by Phylum
geom_vline(xintercept = 0, lty = 2) +
geom_hline(yintercept = -log10(0.05)) +
ggtitle("Differentially Abundant Taxa by Facility") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = -90, hjust = 0, vjust = 0.5),
axis.title = element_text(size = 12),
axis.text = element_text(size = 12),
legend.text = element_text(size = 12))
ggplotly(volcano, tooltip = c("Phylum", "Genus", "Species", "log2FoldChange", "baseMean"))
